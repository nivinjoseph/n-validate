{"version":3,"file":"is-not-in.js","sourceRoot":"","sources":["../../src/number-validation/is-not-in.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,6EAAyE;AACzE,2CAAoC;AAEpC,SAAS;AACT,iBAAwB,MAAqB;IAEzC,MAAM,CAAC,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC;AAHD,0BAGC;AAED;IAA4B,iCAAwB;IAEhD,uBAAmB,MAAqB;QAAxC,iBAQC;QANG,mBAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC;QACzC,QAAA,iBAAO,SAAC;QACR,KAAI,CAAC,iBAAiB,CAAC;YACnB,QAAQ,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,CAAC,EAAP,CAAO,CAAC,EAAvC,CAAuC;YACtD,KAAK,EAAE,eAAe;SACzB,CAAC,CAAC;;IACP,CAAC;IACL,oBAAC;AAAD,CAAC,AAXD,CAA4B,sDAAwB,GAWnD","sourcesContent":["import { ValidationRule } from \"./../validation-rule\";\nimport { BaseNumberValidationRule } from \"./base-number-validation-rule\";\nimport { given } from \"n-defensive\";\n\n// public\nexport function isNotIn(values: Array<number>): ValidationRule<number>\n{\n    return new NumberIsNotIn(values);\n}\n\nclass NumberIsNotIn extends BaseNumberValidationRule\n{\n    public constructor(values: Array<number>)\n    {\n        given(values, \"values\").ensureHasValue();\n        super();\n        this.addValidationRule({\n            validate: t => t == null || values.every(u => u !== t),\n            error: \"Invalid value\"\n        });\n    }\n}"]}