{"version":3,"file":"is-not-in.js","sourceRoot":"","sources":["../../src/number-validation/is-not-in.ts"],"names":[],"mappings":";;AACA,+EAAyE;AACzE,0DAAiD;AAGjD,SAAgB,OAAO,CAAC,MAAqB;IAEzC,OAAO,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC;AAHD,0BAGC;AAED,MAAM,aAAc,SAAQ,sDAAwB;IAEhD,YAAmB,MAAqB;QAEpC,mBAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC;QACzC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,iBAAiB,CAAC;YACnB,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;YACtD,KAAK,EAAE,eAAe;SACzB,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["import { ValidationRule } from \"./../validation-rule\";\nimport { BaseNumberValidationRule } from \"./base-number-validation-rule\";\nimport { given } from \"@nivinjoseph/n-defensive\";\n\n// public\nexport function isNotIn(values: Array<number>): ValidationRule<number>\n{\n    return new NumberIsNotIn(values);\n}\n\nclass NumberIsNotIn extends BaseNumberValidationRule\n{\n    public constructor(values: Array<number>)\n    {\n        given(values, \"values\").ensureHasValue();\n        super();\n        this.addValidationRule({\n            validate: t => t == null || values.every(u => u !== t),\n            error: \"Invalid value\"\n        });\n    }\n}"]}