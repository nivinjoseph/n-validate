{"version":3,"file":"has-min-value.js","sourceRoot":"","sources":["../../src/number-validation/has-min-value.ts"],"names":[],"mappings":";;AAAA,+EAAyE;AAEzE,0DAAiD;AACjD,8BAA4B;AAG5B,SAAgB,WAAW,CAAC,QAAgB;IAExC,OAAO,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AAC3C,CAAC;AAHD,kCAGC;AAED,MAAM,iBAAkB,SAAQ,sDAAwB;IAEpD,YAAmB,QAAgB;QAE/B,mBAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC;QAC7C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,iBAAiB,CAClB;YACI,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,QAAQ;YACzC,KAAK,EAAE,+BAA+B,CAAC,MAAM,CAAC,QAAQ,CAAC;SAC1D,CAAC,CAAC;IACX,CAAC;CACJ","sourcesContent":["import { BaseNumberValidationRule } from \"./base-number-validation-rule\";\nimport { ValidationRule } from \"./../validation-rule\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\n\n// public\nexport function hasMinValue(minValue: number): ValidationRule<number>\n{\n    return new NumberHasMinValue(minValue);\n}\n\nclass NumberHasMinValue extends BaseNumberValidationRule\n{\n    public constructor(minValue: number)\n    {\n        given(minValue, \"minValue\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || t >= minValue,\n                error: \"Value cannot be less than {0}\".format(minValue)\n            });\n    }\n}"]}