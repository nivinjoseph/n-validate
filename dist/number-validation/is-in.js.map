{"version":3,"file":"is-in.js","sourceRoot":"","sources":["../../src/number-validation/is-in.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,6EAAyE;AACzE,2CAAoC;AAEpC,SAAS;AACT,cAAqB,MAAqB;IAEtC,MAAM,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAHD,oBAGC;AAED;IAAyB,8BAAwB;IAE7C,oBAAmB,MAAqB;QAAxC,iBAQC;QANG,mBAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC;QACzC,QAAA,iBAAO,SAAC;QACR,KAAI,CAAC,iBAAiB,CAAC;YACnB,QAAQ,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,CAAC,EAAP,CAAO,CAAC,EAAtC,CAAsC;YACrD,KAAK,EAAE,eAAe;SACzB,CAAC,CAAC;;IACP,CAAC;IACL,iBAAC;AAAD,CAAC,AAXD,CAAyB,sDAAwB,GAWhD","sourcesContent":["import { ValidationRule } from \"./../validation-rule\";\nimport { BaseNumberValidationRule } from \"./base-number-validation-rule\";\nimport { given } from \"n-defensive\";\n\n// public\nexport function isIn(values: Array<number>): ValidationRule<number>\n{\n    return new NumberIsIn(values);\n}\n\nclass NumberIsIn extends BaseNumberValidationRule\n{\n    public constructor(values: Array<number>)\n    {\n        given(values, \"values\").ensureHasValue();\n        super();\n        this.addValidationRule({\n            validate: t => t == null || values.some(u => u === t),\n            error: \"Invalid value\"\n        });\n    }\n}"]}