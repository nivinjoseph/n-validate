import { PropertyValidator } from "./property-validator";
import { ValidationRule } from "./validation-rule";
import { Validator } from "./validator";
import "@nivinjoseph/n-ext";
export declare class InternalPropertyValidator<T, TProperty> implements PropertyValidator<T, TProperty> {
    private readonly _propertyName;
    private _hasError;
    private _error;
    private readonly _validationRules;
    private _lastValidationRule;
    private _conditionPredicate;
    private _overrideError;
    private _errorMessage;
    readonly propertyName: string;
    readonly hasError: boolean;
    readonly error: string;
    constructor(propertyName: string);
    validate(value: T): void;
    isRequired(): PropertyValidator<T, TProperty>;
    isOptional(): PropertyValidator<T, TProperty>;
    ensureIsBoolean(): PropertyValidator<T, TProperty>;
    ensureIsString(): PropertyValidator<T, TProperty>;
    ensureIsNumber(): PropertyValidator<T, TProperty>;
    ensureIsObject(): PropertyValidator<T, TProperty>;
    ensureIsArray(): PropertyValidator<T, TProperty>;
    ensure(propertyValidationPredicate: (propertyValue: TProperty) => boolean): PropertyValidator<T, TProperty>;
    ensureT(valueValidationPredicate: (value: T) => boolean): PropertyValidator<T, TProperty>;
    useValidationRule(validationRule: ValidationRule<TProperty>): PropertyValidator<T, TProperty>;
    useValidator(validator: Validator<TProperty>): PropertyValidator<T, TProperty>;
    if(conditionPredicate: (value: T) => boolean): PropertyValidator<T, TProperty>;
    withMessage(errorMessage: string | Function): PropertyValidator<T, TProperty>;
}
