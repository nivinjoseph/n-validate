{"version":3,"file":"validator.js","sourceRoot":"","sources":["../src/validator.ts"],"names":[],"mappings":";;AAAA,0DAAiD;AACjD,8BAA4B;AAI5B,+EAA0E;AAE1E,SAAS;AACT;IAeI,YAAmB,YAAqB,IAAI;QAb3B,wBAAmB,GAAG,IAAI,KAAK,EAAqC,CAAC;QACrE,YAAO,GAA6B,EAAE,CAAC;QAChD,eAAU,GAAG,KAAK,CAAC;QACnB,eAAU,GAAG,IAAI,CAAC;QAYtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAVD,IAAW,OAAO,KAAc,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC1D,IAAW,SAAS,KAAc,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3D,IAAW,MAAM,KAA+B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACtE,IAAW,QAAQ,KAAc,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9E,IAAW,SAAS,KAAc,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IASpD,GAAG,CAAY,YAAoB;QAEtC,mBAAK,CAAC,YAAY,EAAE,cAAc,CAAC;aAC9B,cAAc,EAAE;aAChB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;aACrC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,EACtE,+CAA+C,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;QAE1E,IAAI,iBAAiB,GAAG,IAAI,uDAAyB,CAAe,YAAY,CAAC,CAAC;QAClF,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;QAClC,MAAM,CAAC,iBAAiB,CAAC;IAC7B,CAAC;IAEM,QAAQ,CAAC,KAAQ;QAEpB,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC;QAEvC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CACpB,CAAC;YACG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAEjC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAClB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,QAAQ,CAAC;gBAC7B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;YAC/D,CAAC,CAAC,CAAC;QACP,CAAC;QACD,IAAI,CACJ,CAAC;YACG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC;QAC/E,CAAC;IACL,CAAC;IAEM,MAAM;QAET,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC3B,CAAC;IAEM,OAAO;QAEV,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;CACJ;AAhED,8BAgEC","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\nimport { PropertyValidator } from \"./property-validator\";\nimport { ValidationInitializer } from \"./validation-initializer\";\nimport { ValidationExecutor } from \"./validation-executor\";\nimport { InternalPropertyValidator } from \"./internal-property-validator\";\n\n// public\nexport class Validator<T> implements ValidationInitializer<T>, ValidationExecutor<T>\n{\n    private readonly _propertyValidators = new Array<InternalPropertyValidator<T, any>>();\n    private readonly _errors: { [index: string]: any } = {};\n    private _hasErrors = false;\n    private _isEnabled = true;\n    \n\n    public get isValid(): boolean { return !this._hasErrors; }\n    public get hasErrors(): boolean { return this._hasErrors; }\n    public get errors(): { [index: string]: any } { return this._errors; }\n    public get hasRules(): boolean { return this._propertyValidators.length > 0; }\n    public get isEnabled(): boolean { return this._isEnabled; }\n    \n    \n    public constructor(isEnabled: boolean = true)\n    {\n        this._isEnabled = isEnabled;\n    }\n\n\n    public for<TProperty>(propertyName: string): PropertyValidator<T, TProperty>\n    {\n        given(propertyName, \"propertyName\")\n            .ensureHasValue()\n            .ensure(t => !t.isEmptyOrWhiteSpace())\n            .ensure(t => this._propertyValidators.every(u => u.propertyName !== t),\n            \"validation already defined for property '{0}'\".format(propertyName));\n\n        let propertyValidator = new InternalPropertyValidator<T, TProperty>(propertyName);\n        this._propertyValidators.push(propertyValidator);\n        this._errors[propertyName] = null;\n        return propertyValidator;\n    }\n\n    public validate(value: T): void \n    {\n        given(value, \"value\").ensureHasValue();\n        \n        this._hasErrors = false;\n        if (this._isEnabled)\n        {\n            this._propertyValidators.forEach(t =>\n            {\n                t.validate(value);\n                this._hasErrors = t.hasError;\n                this._errors[t.propertyName] = t.hasError ? t.error : null;\n            });\n        }   \n        else\n        {\n            this._propertyValidators.forEach(t => this._errors[t.propertyName] = null);\n        }\n    }\n    \n    public enable(): void\n    {\n        this._isEnabled = true;\n    }\n    \n    public disable(): void\n    {\n        this._isEnabled = false;\n    }\n}"]}