{"version":3,"file":"validator.js","sourceRoot":"","sources":["../src/validator.ts"],"names":[],"mappings":";;AAAA,6CAAoC;AACpC,iBAAe;AAIf,+EAA0E;AAE1E,SAAS;AACT;IAAA;QAEY,wBAAmB,GAAG,IAAI,KAAK,EAAqC,CAAC;QACrE,eAAU,GAAG,KAAK,CAAC;QACnB,YAAO,GAA6B,EAAE,CAAC;IAqCnD,CAAC;IAnCG,IAAW,OAAO,KAAc,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC1D,IAAW,SAAS,KAAc,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3D,IAAW,MAAM,KAA+B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACtE,IAAW,QAAQ,KAAc,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAGvE,GAAG,CAAY,YAAoB;QAEtC,mBAAK,CAAC,YAAY,EAAE,cAAc,CAAC;aAC9B,cAAc,EAAE;aAChB,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC;aACrC,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,EACtE,+CAA+C,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;QAE1E,IAAI,iBAAiB,GAAG,IAAI,uDAAyB,CAAe,YAAY,CAAC,CAAC;QAClF,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACjD,MAAM,CAAC,iBAAiB,CAAC;IAC7B,CAAC;IAEM,QAAQ,CAAC,KAAQ;QAEpB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC;aAChB,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAE9B,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClB,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CACf,CAAC;gBACG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;YAC3C,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAzCD,8BAyCC","sourcesContent":["import { given } from \"n-defensive\";\nimport \"n-ext\";\nimport { PropertyValidator } from \"./property-validator\";\nimport { ValidationInitializer } from \"./validation-initializer\";\nimport { ValidationExecutor } from \"./validation-executor\";\nimport { InternalPropertyValidator } from \"./internal-property-validator\";\n\n// public\nexport class Validator<T> implements ValidationInitializer<T>, ValidationExecutor<T>\n{\n    private _propertyValidators = new Array<InternalPropertyValidator<T, any>>();\n    private _hasErrors = false;\n    private _errors: { [index: string]: any } = {};\n\n    public get isValid(): boolean { return !this._hasErrors; }\n    public get hasErrors(): boolean { return this._hasErrors; }\n    public get errors(): { [index: string]: any } { return this._errors; }\n    public get hasRules(): boolean { return this._propertyValidators.length > 0; }\n\n\n    public for<TProperty>(propertyName: string): PropertyValidator<T, TProperty>\n    {\n        given(propertyName, \"propertyName\")\n            .ensureHasValue()\n            .ensure(t => !t.isEmptyOrWhiteSpace())\n            .ensure(t => this._propertyValidators.every(u => u.propertyName !== t),\n            \"validation already defined for property '{0}'\".format(propertyName));\n\n        let propertyValidator = new InternalPropertyValidator<T, TProperty>(propertyName);\n        this._propertyValidators.push(propertyValidator);\n        return propertyValidator;\n    }\n\n    public validate(value: T): void \n    {\n        this._hasErrors = false;\n        this._errors = {};\n        given(value, \"value\")\n            .ensureHasValue();\n        this._propertyValidators.forEach(t =>\n        {\n            t.validate(value);\n            if (t.hasError)\n            {\n                this._hasErrors = true;\n                this._errors[t.propertyName] = t.error;\n            }\n        });\n    }\n}"]}