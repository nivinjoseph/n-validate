{"version":3,"file":"number-validation.js","sourceRoot":"","sources":["../src/number-validation.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseValidationRule from \"./base-validation-rule\";\nimport ValidationRule from \"./validation-rule\";\nimport \"n-ext\";\nimport given from \"n-defensive\";\n\nexport function hasMinValue(minValue: number): ValidationRule<number>\n{\n    return new NumberHasMinValue(minValue);\n}\n\nexport function hasMaxValue(maxValue: number): ValidationRule<number>\n{\n    return new NumberHasMaxValue(maxValue);\n}\n\nexport function isIn(values: Array<number>): ValidationRule<number>\n{\n    return new NumberIsIn(values);\n}\n\nexport function isNotIn(values: Array<number>): ValidationRule<number>\n{\n    return new NumberIsNotIn(values);\n}\n\n\nabstract class BaseNumberValidationRule extends BaseValidationRule<number>\n{\n    public constructor()\n    {\n        super();\n        this.addValidationRule(\n            {\n                validate: (t: number) => typeof t === \"number\",\n                error: \"Invalid value\"\n            });\n    }\n}\n\nclass NumberHasMinValue extends BaseNumberValidationRule\n{\n    public constructor(minValue: number)\n    {\n        given(minValue, \"minValue\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || t >= minValue,\n                error: \"Value cannot be less than {0}\".format(minValue)\n            });\n    }\n}\n\nclass NumberHasMaxValue extends BaseNumberValidationRule\n{\n    public constructor(maxValue: number)\n    {\n        given(maxValue, \"maxValue\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || t <= maxValue,\n                error: \"Value cannot be greater than {0}\".format(maxValue)\n            });\n    }\n}   \n\nclass NumberIsIn extends BaseNumberValidationRule\n{\n    public constructor(values: Array<number>)\n    {\n        given(values, \"values\").ensureHasValue();\n        super();\n        this.addValidationRule({\n            validate: t => t == null || values.some(u => u === t),\n            error: \"Invalid value\"\n        });\n    }\n}\n\nclass NumberIsNotIn extends BaseNumberValidationRule\n{\n    public constructor(values: Array<number>)\n    {\n        given(values, \"values\").ensureHasValue();\n        super();\n        this.addValidationRule({\n            validate: t => t == null || values.every(u => u === t),\n            error: \"Invalid value\"\n        });\n    }\n}"]}