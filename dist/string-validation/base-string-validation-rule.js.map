{"version":3,"file":"base-string-validation-rule.js","sourceRoot":"","sources":["../../src/string-validation/base-string-validation-rule.ts"],"names":[],"mappings":";;AAAA,oEAA+D;AAG/D,MAAsB,wBAAyB,SAAQ,yCAA0B;IAE7E;QAEI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,iBAAiB,CAClB;YACI,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ;YACpC,KAAK,EAAE,eAAe;SACzB,CAAC,CAAC;IACX,CAAC;IAES,QAAQ,CAAC,KAAU;QAEzB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QAChC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;YAClB,OAAO,KAAK,CAAC;QACjB,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QACtC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;CACJ;AApBD,4DAoBC","sourcesContent":["import { BaseValidationRule } from \"./../base-validation-rule\";\n\n// public\nexport abstract class BaseStringValidationRule extends BaseValidationRule<string>\n{\n    protected constructor()\n    {\n        super();\n        this.addValidationRule(\n            {\n                validate: t => typeof t === \"string\",\n                error: \"Invalid value\"\n            });\n    }\n\n    protected isNumber(value: any): boolean\n    {\n        value = value.toString().trim();\n        if (value.length === 0)\n            return false;\n        let parsed = +value.toString().trim();\n        return !isNaN(parsed) && isFinite(parsed);\n    }\n}"]}