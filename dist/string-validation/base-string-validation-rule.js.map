{"version":3,"file":"base-string-validation-rule.js","sourceRoot":"","sources":["../../src/string-validation/base-string-validation-rule.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,kEAA+D;AAE/D,SAAS;AACT;IAAuD,4CAA0B;IAE7E;QAAA,YAEI,iBAAO,SAMV;QALG,KAAI,CAAC,iBAAiB,CAClB;YACI,QAAQ,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,KAAK,QAAQ,EAArB,CAAqB;YACpC,KAAK,EAAE,eAAe;SACzB,CAAC,CAAC;;IACX,CAAC;IAES,2CAAQ,GAAlB,UAAmB,KAAU;QAEzB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QAChC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC;QACjB,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QACtC,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IACL,+BAAC;AAAD,CAAC,AApBD,CAAuD,yCAAkB,GAoBxE;AApBqB,4DAAwB","sourcesContent":["import { BaseValidationRule } from \"./../base-validation-rule\";\n\n// public\nexport abstract class BaseStringValidationRule extends BaseValidationRule<string>\n{\n    protected constructor()\n    {\n        super();\n        this.addValidationRule(\n            {\n                validate: t => typeof t === \"string\",\n                error: \"Invalid value\"\n            });\n    }\n\n    protected isNumber(value: any): boolean\n    {\n        value = value.toString().trim();\n        if (value.length === 0)\n            return false;\n        let parsed = +value.toString().trim();\n        return !isNaN(parsed) && isFinite(parsed);\n    }\n}"]}