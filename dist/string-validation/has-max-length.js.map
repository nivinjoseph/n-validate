{"version":3,"file":"has-max-length.js","sourceRoot":"","sources":["../../src/string-validation/has-max-length.ts"],"names":[],"mappings":";;AACA,+EAAyE;AACzE,0DAAiD;AACjD,8BAA4B;AAG5B,SAAgB,YAAY,CAAC,SAAiB;IAE1C,OAAO,IAAI,kBAAkB,CAAC,SAAS,CAAC,CAAC;AAC7C,CAAC;AAHD,oCAGC;AAED,MAAM,kBAAmB,SAAQ,sDAAwB;IAErD,YAAmB,SAAiB;QAEhC,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAC/C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,iBAAiB,CAClB;YACI,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,IAAI,SAAS;YACxD,KAAK,EAAE,4BAA4B,CAAC,MAAM,CAAC,SAAS,CAAC;SACxD,CAAC,CAAC;IACX,CAAC;CACJ","sourcesContent":["import { ValidationRule } from \"./../validation-rule\";\nimport { BaseStringValidationRule } from \"./base-string-validation-rule\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\n\n// public\nexport function hasMaxLength(maxLength: number): ValidationRule<string>\n{\n    return new StringHasMaxLength(maxLength);\n}\n\nclass StringHasMaxLength extends BaseStringValidationRule\n{\n    public constructor(maxLength: number)\n    {\n        given(maxLength, \"maxLength\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || t.trim().length <= maxLength,\n                error: \"Max length of {0} required\".format(maxLength)\n            });\n    }\n}"]}