{"version":3,"file":"is-in.js","sourceRoot":"","sources":["../../src/string-validation/is-in.ts"],"names":[],"mappings":";;AACA,+EAAyE;AACzE,6CAAoC;AAKpC,cAAqB,MAAqB,EAAE,UAAoB;IAE5D,MAAM,CAAC,IAAI,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAC9C,CAAC;AAHD,oBAGC;AAED,gBAAiB,SAAQ,sDAAwB;IAI7C,YAAmB,MAAqB,EAAE,UAAoB;QAE1D,mBAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC;QACzC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,iBAAiB,CAClB;YACI,QAAQ,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,UAAU;kBAChC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;kBACnE,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;YAC7C,KAAK,EAAE,eAAe;SACzB,CAAC,CAAC;IACX,CAAC;CACJ","sourcesContent":["import { ValidationRule } from \"./../validation-rule\";\nimport { BaseStringValidationRule } from \"./base-string-validation-rule\";\nimport { given } from \"n-defensive\";\n\n// public\nexport function isIn(values: Array<string>): ValidationRule<string>;\nexport function isIn(values: Array<string>, ignoreCase: boolean): ValidationRule<string>;\nexport function isIn(values: Array<string>, ignoreCase?: boolean): ValidationRule<string>\n{\n    return new StringIsIn(values, ignoreCase);\n}\n\nclass StringIsIn extends BaseStringValidationRule\n{\n    public constructor(values: Array<string>);\n    public constructor(values: Array<string>, ignoreCase: boolean);\n    public constructor(values: Array<string>, ignoreCase?: boolean)\n    {\n        given(values, \"values\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || ignoreCase\n                    ? values.some(v => v.trim().toLowerCase() === t.trim().toLowerCase())\n                    : values.some(v => v.trim() === t.trim()),\n                error: \"Invalid value\"\n            });\n    }\n}"]}