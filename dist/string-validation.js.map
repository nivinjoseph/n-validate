{"version":3,"file":"string-validation.js","sourceRoot":"","sources":["../src/string-validation.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseValidationRule from \"./base-validation-rule\";\nimport ValidationRule from \"./validation-rule\";\nimport \"n-ext\";\nimport given from \"n-defensive\";\n\nexport function hasMinLength(minLength: number): ValidationRule<string>\n{\n    return new StringHasMinLength(minLength);\n}\n\nexport function hasMaxLength(maxLength: number): ValidationRule<string>\n{\n    return new StringHasMaxLength(maxLength);\n}\n\nexport function hasExactLength(exactLength: number): ValidationRule<string>\n{\n    return new StringHasExactLength(exactLength);\n}\n\nexport function stringIsIn(values: Array<string>): ValidationRule<string>;\nexport function stringIsIn(values: Array<string>, ignoreCase: boolean): ValidationRule<string>;\nexport function stringIsIn(values: Array<string>, ignoreCase?: boolean): ValidationRule<string>\n{\n    return new StringIsIn(values, ignoreCase);\n}\n\nexport function stringIsNotIn(values: Array<string>): ValidationRule<string>;\nexport function stringIsNotIn(values: Array<string>, ignoreCase: boolean): ValidationRule<string>;\nexport function stringIsNotIn(values: Array<string>, ignoreCase?: boolean): ValidationRule<string>\n{\n    return new StringIsNotIn(values, ignoreCase);\n}\n\nexport function isEmail(): ValidationRule<string>\n{\n    return new StringIsEmail();\n}\n\nexport function containsOnlyNumbers(): ValidationRule<string>\n{\n    return new StringContainsOnlyNumbers();\n}\n\nexport function isPhoneOrFaxNumber(): ValidationRule<string>\n{\n    return new StringIsPhoneOrFaxNumber();\n}    \n\n\nabstract class BaseStringValidationRule extends BaseValidationRule<string>\n{\n    protected constructor()\n    {\n        super();\n        this.addValidationRule(\n            {\n                validate: t => typeof t === \"string\",\n                error: \"Invalid value\"\n            });\n    }\n}\n\nclass StringHasMinLength extends BaseStringValidationRule\n{\n    public constructor(minLength: number)\n    {\n        given(minLength, \"minLength\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || t.trim().length >= minLength,\n                error: \"Min length of {0} required\".format(minLength)\n            });\n    }\n}\n\nclass StringHasMaxLength extends BaseStringValidationRule\n{\n    public constructor(maxLength: number)\n    {\n        given(maxLength, \"maxLength\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || t.trim().length <= maxLength,\n                error: \"Max length of {0} required\".format(maxLength)\n            });\n    }\n}\n\nclass StringHasExactLength extends BaseStringValidationRule\n{\n    public constructor(exactLength: number)\n    {\n        given(exactLength, \"exactLength\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || t.trim().length === exactLength,\n                error: \"Exact length of {0} required\".format(exactLength)\n            });\n    }\n}\n\nclass StringIsIn extends BaseStringValidationRule\n{\n    public constructor(values: Array<string>);\n    public constructor(values: Array<string>, ignoreCase: boolean);\n    public constructor(values: Array<string>, ignoreCase?: boolean)\n    {\n        given(values, \"values\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || ignoreCase\n                    ? values.some(v => v.trim().toLowerCase() === t.trim().toLowerCase())\n                    : values.some(v => v.trim() === t.trim()),\n                error: \"Invalid value\"\n            });\n    }\n}\n\nclass StringIsNotIn extends BaseStringValidationRule\n{\n    public constructor(values: Array<string>);\n    public constructor(values: Array<string>, ignoreCase: boolean);\n    public constructor(values: Array<string>, ignoreCase?: boolean)\n    {\n        given(values, \"values\").ensureHasValue();\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || ignoreCase\n                    ? values.every(v => v.trim().toLowerCase() !== t.trim().toLowerCase())\n                    : values.every(v => v.trim() === t.trim()),\n                error: \"Invalid value\"\n            });\n    }\n}\n\nclass StringIsEmail extends BaseStringValidationRule\n{\n    public constructor()\n    {\n        super();\n        this.addValidationRule(\n            {\n                validate: t =>\n                {\n                    let re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                    return t == null || re.test(t.trim());\n                },\n                error: \"Invalid value\"\n            });\n    }\n}\n\nfunction isNumber(value: any): boolean\n{\n    let parsed = +value.toString().trim();\n    return !isNaN(parsed) && isFinite(parsed);\n}\n\nclass StringContainsOnlyNumbers extends BaseStringValidationRule\n{\n    public constructor()\n    {\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || isNumber(t),\n                error: \"Invalid value\"\n            });\n    }\n}\n\nclass StringIsPhoneOrFaxNumber extends BaseStringValidationRule\n{\n    public constructor()\n    {\n        super();\n        this.addValidationRule(\n            {\n                validate: t => t == null || (isNumber(t) && t.trim().length === 10),\n                error: \"Invalid value\"\n            });\n    }\n}"]}